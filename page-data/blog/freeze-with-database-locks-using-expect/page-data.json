{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/freeze-with-database-locks-using-expect","result":{"data":{"markdownRemark":{"html":"<p>Each PHP-FPM workers serve web requests relentlessly.\nSometimes it would be useful to pause a thread executing a\nspecific script, so that the whole worker process could be\nstopped for some time and examined, (and later released to run again if needed).</p>\n<p>If that is a PHP app, setting a breakpoint in XDebug naturally\nfeels like a way to achieve that. Yet, XDebug is not always available,-\nin fact it is not recommended to run it on production\nenvironment at all.</p>\n<p>However, webapps typically talk to databases. If any PHP script,\nis trying to write to a database record which is locked by another transaction,\nthen it waits for the locking transaction to release the lock\n(which happens when transaction is committed or rolled back).</p>\n<p>Starting a transaction like this, but without ending it:</p>\n<pre><code>mysql> START TRANSACTION;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> UPDATE wp_posts SET post_content=\"Pending content...\" WHERE id=1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0 \n</code></pre>\n<p>will result in write lock on the record. Therefore a PHP script\nwill be frozen when trying to write to that database record.</p>\n<p>Any web request that tries to write to the locked record,\nnow will be blocked by the database lock.</p>\n<p>[[[ Here comes the picture ]]]</p>\n<h2>But this is too much of typing...</h2>\n<p>The problem is that to lock a record in this way requires so much effort:\nfirst the transaction has to be started,\nthen the locking update query has to be executed,\nand this database connection has to be left as is,\nmeanwhile the stopped process can be scrutinized.</p>\n<p>Also it is important to make sure the transaction is ended before disconnecting,\notherwise it will remain open until its timeout.</p>\n<p>To spare some typing and window switching,\nthe interaction with the mysql client could be automated using Expect:</p>\n<p>From its man-page:</p>\n<pre><code>Expect is a program that \"talks\" to other interactive programs\naccording  to  a  script.   Following the script, Expect knows\nwhat can be expected from  a  program  and  what  the  correct\nresponse  should be.  An interpreted language provides branch‚Äê\ning and high-level control structures to direct the  dialogue.\nIn  addition,  the user can take control and interact directly\nwhen desired, afterward returning control to the script.\n</code></pre>\n<p>We will create an Expect script:</p>\n<pre><code>#!/usr/bin/expect\n\nset timeout 105\ntrap {\n        send \"ROLLBACK;\\rEXIT\\r\"; expect -exact \"Bye\"; exit 0\n} SIGINT\n\nspawn docker exec -it enchantedlamp_mysql_1 sh -c \"exec mysql -uroot -p\\\"\\$MYSQL_ROOT_PASSWORD\\\" wordpress\"\nexpect -exact \"mysql>\"\nsend \"START TRANSACTION;\\r\"\nexpect -exact \"mysql>\"\nsend \"UPDATE wp_posts SET post_content='Pending content...' WHERE id=1;\\r\"\nexpect -exact \"mysql>\"\n\nsend_user \"RECORD BLOCKED FOR 100s (C^ FOR EARLY EXIT)\"\nsend \"\\r\"\n\nsleep 100\nexpect -exact \"mysql>\"\nsend \"ROLLBACK;\\rEXIT\\r\"; expect -exact \"Bye\"; exit 0\n</code></pre>\n<p>This script can be run like <code>./block-record.exp</code>,\nit will give 100s for debugging the frozen state.\nIt can be exited earlier with Ctrl+C at any time though.</p>\n<p><a href=\"https://www.thegeekstuff.com/2010/10/expect-examples/\">https://www.thegeekstuff.com/2010/10/expect-examples/</a></p>","frontmatter":{"date":"February 20, 2018","slug":"/blog/freeze-with-database-locks-using-expect","title":"Freeze WebApp with database locks (and automate it with Expect)"}}},"pageContext":{"slug":"/blog/freeze-with-database-locks-using-expect"}},"staticQueryHashes":["3649515864","63159454"]}